name: Automated Maintenance

on:
  schedule:
    # Run every 3 hours as requested
    - cron: '0 */3 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
    
    - name: Check for dependency updates
      id: check-deps
      run: |
        # Create requirements file if it doesn't exist
        echo "mcp>=0.1.0" > requirements.in
        echo "pydantic>=2.0.0" >> requirements.in
        echo "psutil>=5.8.0" >> requirements.in
        echo "aiofiles>=0.8.0" >> requirements.in
        
        # Generate current requirements
        pip-compile requirements.in
        
        # Check if there are updates available
        pip-compile --upgrade --dry-run requirements.in > updates.txt
        
        if [ -s updates.txt ]; then
          echo "updates_available=true" >> $GITHUB_OUTPUT
          echo "Updates available:"
          cat updates.txt
        else
          echo "updates_available=false" >> $GITHUB_OUTPUT
          echo "No updates available"
        fi
    
    - name: Create PR for dependency updates
      if: steps.check-deps.outputs.updates_available == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "🔧 Update dependencies"
        title: "🔧 Automated dependency updates"
        body: |
          This PR contains automated dependency updates.
          
          🤖 **Automated Changes:**
          - Updated Python dependencies to latest compatible versions
          - Generated by automated maintenance workflow
          
          Please review and test before merging.
        branch: automated/dependency-updates
        labels: dependencies,automated

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install safety
      run: pip install safety
    
    - name: Run security scan
      id: security
      run: |
        safety check --output json > security-report.json || true
        
        # Check if vulnerabilities were found
        if [ -s security-report.json ] && [ "$(cat security-report.json)" != "[]" ]; then
          echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          echo "Security vulnerabilities found!"
          cat security-report.json
        else
          echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          echo "No security vulnerabilities found"
        fi
    
    - name: Create security issue
      if: steps.security.outputs.vulnerabilities_found == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
          
          const issueBody = `🚨 **Security Vulnerabilities Detected**
          
          The automated security scan has detected vulnerabilities in our dependencies:
          
          \`\`\`json
          ${JSON.stringify(report, null, 2)}
          \`\`\`
          
          **Action Required:**
          - Review the vulnerabilities listed above
          - Update affected dependencies
          - Test the application after updates
          - Consider temporary mitigations if updates aren't immediately available
          
          *This issue was created automatically by the maintenance workflow.*`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security Vulnerabilities Detected',
            body: issueBody,
            labels: ['security', 'priority-high', 'automated']
          });

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check repository health
      id: health
      run: |
        # Check for common issues
        issues=()
        
        # Check if README exists and is substantial
        if [ ! -f README.md ] || [ $(wc -l < README.md) -lt 20 ]; then
          issues+=("README.md is missing or too short")
        fi
        
        # Check if CHANGELOG exists
        if [ ! -f CHANGELOG.md ]; then
          issues+=("CHANGELOG.md is missing")
        fi
        
        # Check if tests directory exists and has tests
        if [ ! -d tests ] || [ $(find tests -name "*.py" | wc -l) -lt 3 ]; then
          issues+=("Insufficient test coverage")
        fi
        
        # Check if GitHub issue templates exist
        if [ ! -d .github/ISSUE_TEMPLATE ]; then
          issues+=("GitHub issue templates missing")
        fi
        
        # Check if contributing guidelines exist
        if [ ! -f CONTRIBUTING.md ]; then
          issues+=("CONTRIBUTING.md is missing")
        fi
        
        # Output results
        if [ ${#issues[@]} -eq 0 ]; then
          echo "health_status=good" >> $GITHUB_OUTPUT
          echo "Repository health check passed!"
        else
          echo "health_status=issues" >> $GITHUB_OUTPUT
          echo "health_issues=${issues[*]}" >> $GITHUB_OUTPUT
          echo "Repository health issues found:"
          printf '%s\n' "${issues[@]}"
        fi
    
    - name: Create health improvement issue
      if: steps.health.outputs.health_status == 'issues'
      uses: actions/github-script@v6
      with:
        script: |
          const issues = '${{ steps.health.outputs.health_issues }}'.split(' ');
          
          const issueBody = `🏥 **Repository Health Check Results**
          
          The automated health check has identified areas for improvement:
          
          ${issues.map(issue => `- ❌ ${issue}`).join('\n')}
          
          **Recommended Actions:**
          - Address the issues listed above
          - Consider setting up automated checks for these items
          - Review repository best practices
          
          *This issue was created automatically by the maintenance workflow.*`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🏥 Repository Health Improvements Needed',
            body: issueBody,
            labels: ['maintenance', 'documentation', 'automated']
          });

  cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up old workflow runs
      uses: actions/github-script@v6
      with:
        script: |
          // Keep only the last 50 workflow runs for each workflow
          const workflows = await github.rest.actions.listRepoWorkflows({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          for (const workflow of workflows.data.workflows) {
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow.id,
              per_page: 100
            });
            
            // Delete runs older than the 50 most recent
            const runsToDelete = runs.data.workflow_runs.slice(50);
            
            for (const run of runsToDelete) {
              if (run.status === 'completed') {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  console.log(`Deleted workflow run ${run.id}`);
                } catch (error) {
                  console.log(`Could not delete workflow run ${run.id}: ${error.message}`);
                }
              }
            }
          }
    
    - name: Update repository metrics
      uses: actions/github-script@v6
      with:
        script: |
          // Collect repository metrics
          const { data: repo } = await github.rest.repos.get({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          const metrics = {
            stars: repo.stargazers_count,
            forks: repo.forks_count,
            open_issues: issues.length,
            latest_release: releases.length > 0 ? releases[0].tag_name : 'none',
            last_updated: new Date().toISOString()
          };
          
          console.log('Repository Metrics:', JSON.stringify(metrics, null, 2));

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install memory-profiler psutil
    
    - name: Run performance tests
      id: perf
      run: |
        # Create a simple performance test
        cat > perf_test.py << 'EOF'
        import time
        import psutil
        import os
        from ai_mail_mcp.mailbox import MailboxManager
        from ai_mail_mcp.models import Message
        from datetime import datetime, timezone
        from pathlib import Path
        import tempfile
        
        def test_message_performance():
            with tempfile.TemporaryDirectory() as temp_dir:
                db_path = Path(temp_dir) / "test.db"
                mailbox = MailboxManager(db_path)
                
                # Test message creation performance
                start_time = time.time()
                start_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
                
                messages = []
                for i in range(1000):
                    msg = Message(
                        id=f"test-{i}",
                        sender="test-sender",
                        recipient="test-recipient", 
                        subject=f"Test message {i}",
                        body=f"This is test message {i}" * 10,
                        timestamp=datetime.now(timezone.utc)
                    )
                    mailbox.send_message(msg)
                
                end_time = time.time()
                end_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
                
                duration = end_time - start_time
                memory_used = end_memory - start_memory
                
                print(f"Performance Results:")
                print(f"- Time to send 1000 messages: {duration:.2f} seconds")
                print(f"- Memory used: {memory_used:.2f} MB")
                print(f"- Messages per second: {1000/duration:.2f}")
                
                # Test retrieval performance
                start_time = time.time()
                messages = mailbox.get_messages("test-recipient", limit=1000)
                retrieval_time = time.time() - start_time
                
                print(f"- Time to retrieve 1000 messages: {retrieval_time:.2f} seconds")
                
                return {
                    'send_duration': duration,
                    'memory_used': memory_used,
                    'messages_per_second': 1000/duration,
                    'retrieval_time': retrieval_time
                }
        
        if __name__ == "__main__":
            results = test_message_performance()
        EOF
        
        python perf_test.py > performance_results.txt
        cat performance_results.txt
        
        # Check if performance has degraded
        if python -c "
        import re
        with open('performance_results.txt') as f:
            content = f.read()
        mps = float(re.search(r'Messages per second: ([\d.]+)', content).group(1))
        if mps < 100:  # Alert if less than 100 messages per second
            exit(1)
        "; then
          echo "performance_good=true" >> $GITHUB_OUTPUT
        else
          echo "performance_good=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create performance alert
      if: steps.perf.outputs.performance_good == 'false'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('performance_results.txt', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '⚠️ Performance Degradation Detected',
            body: `🐌 **Performance Alert**
            
            The automated performance monitoring has detected potential performance degradation:
            
            \`\`\`
            ${results}
            \`\`\`
            
            **Action Required:**
            - Review recent changes that might impact performance
            - Run more detailed profiling
            - Consider optimization strategies
            - Update performance benchmarks if changes are intentional
            
            *This issue was created automatically by the maintenance workflow.*`,
            labels: ['performance', 'needs-investigation', 'automated']
          });
