name: Automated Maintenance - Safe Mode

on:
  schedule:
    # Run every 3 hours as requested - but with conservative actions
    - cron: '0 */3 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  dependency-scan:
    name: Safe Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
    
    - name: Check for security vulnerabilities
      id: security
      run: |
        echo "üîç Running security scans..."
        
        # Run safety check
        safety check --output json > safety-report.json || true
        
        # Run pip-audit
        pip-audit --output json > audit-report.json || true
        
        # Check results
        if [ -s safety-report.json ] && [ "$(cat safety-report.json)" != "[]" ]; then
          echo "security_issues=true" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Security vulnerabilities found"
        else
          echo "security_issues=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No security vulnerabilities found"
        fi
    
    - name: Log security findings (no auto-issue creation)
      if: steps.security.outputs.security_issues == 'true'
      run: |
        echo "üö® Security vulnerabilities detected - review required"
        echo "Safety Report:"
        cat safety-report.json || echo "No safety report"
        echo "Audit Report:"
        cat audit-report.json || echo "No audit report"
        echo ""
        echo "Manual action required: Review and create issue if needed"

  basic-health-check:
    name: Basic Health Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check repository health
      run: |
        echo "üè• Repository Health Check"
        echo "=========================="
        
        # Check essential files
        echo "üìÅ Essential Files:"
        [ -f README.md ] && echo "‚úÖ README.md exists" || echo "‚ùå README.md missing"
        [ -f pyproject.toml ] && echo "‚úÖ pyproject.toml exists" || echo "‚ùå pyproject.toml missing"
        [ -f package.json ] && echo "‚úÖ package.json exists" || echo "‚ùå package.json missing"
        [ -d tests ] && echo "‚úÖ tests directory exists" || echo "‚ùå tests directory missing"
        [ -d src ] && echo "‚úÖ src directory exists" || echo "‚ùå src directory missing"
        
        # Check test files
        echo ""
        echo "üß™ Test Files:"
        test_count=$(find tests -name "*.py" 2>/dev/null | wc -l)
        echo "Python test files: $test_count"
        
        # Check documentation
        echo ""
        echo "üìö Documentation:"
        readme_lines=$(wc -l < README.md 2>/dev/null || echo "0")
        echo "README.md lines: $readme_lines"
        
        # No automatic issue creation - just logging

  safe-performance-check:
    name: Safe Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Basic performance validation
      run: |
        echo "‚ö° Basic Performance Check"
        echo "========================="
        
        # Install minimal dependencies
        pip install pytest || echo "Failed to install pytest"
        
        # Try to install project dependencies
        if pip install -e . 2>/dev/null; then
          echo "‚úÖ Project installation successful"
          
          # Simple import test
          python -c "
          import sys
          sys.path.insert(0, 'src')
          try:
              import ai_mail_mcp
              print('‚úÖ Basic package import works')
          except Exception as e:
              print(f'‚ö†Ô∏è Import issues: {e}')
          " || echo "Import test completed with issues"
          
        else
          echo "‚ö†Ô∏è Project installation failed - skipping performance tests"
        fi
        
        echo ""
        echo "‚úÖ Safe performance check completed"

  workflow-cleanup:
    name: Minimal Cleanup
    runs-on: ubuntu-latest
    
    steps:
    - name: Log workflow statistics
      uses: actions/github-script@v7
      with:
        script: |
          // Just log workflow statistics, no deletion
          const workflows = await github.rest.actions.listRepoWorkflows({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          console.log('üìä Workflow Statistics:');
          console.log(`Total workflows: ${workflows.data.workflows.length}`);
          
          for (const workflow of workflows.data.workflows) {
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow.id,
              per_page: 10
            });
            
            console.log(`${workflow.name}: ${runs.data.total_count} total runs`);
          }

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, basic-health-check, safe-performance-check, workflow-cleanup]
    if: always()
    
    steps:
    - name: Generate maintenance report
      run: |
        echo "üìã Maintenance Cycle Summary"
        echo "============================"
        echo ""
        echo "üîç Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "üè• Health Check: ${{ needs.basic-health-check.result }}"
        echo "‚ö° Performance Check: ${{ needs.safe-performance-check.result }}"
        echo "üßπ Cleanup: ${{ needs.workflow-cleanup.result }}"
        echo ""
        
        overall_status="‚úÖ HEALTHY"
        if [[ "${{ needs.dependency-scan.result }}" == "failure" ]]; then
          overall_status="‚ö†Ô∏è NEEDS ATTENTION"
        fi
        
        echo "Overall Status: $overall_status"
        echo ""
        echo "üéØ Next maintenance cycle: $(date -d '+3 hours' --iso-8601=minutes)"
        echo ""
        echo "üí° Manual Actions Required:"
        echo "- Review any security findings above"
        echo "- Check failing jobs if any"
        echo "- Update dependencies if security issues found"