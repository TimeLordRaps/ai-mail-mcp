name: AI Mail MCP CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */3 * * *'

jobs:
  test:
    name: Core Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pydantic psutil aiofiles || echo "Some installs failed"
        pip install mcp || pip install model-context-protocol || echo "MCP install failed - continuing"
    
    - name: Test imports
      run: |
        python -c "import sys; print(f'Python: {sys.version}')"
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            from ai_mail_mcp.models import Message
            from ai_mail_mcp.mailbox import MailboxManager
            from ai_mail_mcp.agent import AgentIdentifier
            print('‚úÖ All core imports successful')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            exit(1)
        "
    
    - name: Test functionality
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from ai_mail_mcp.models import Message
        msg = Message(
            id='test-1',
            sender='test@example.com',
            recipient='user@example.com', 
            subject='Test Message',
            content='Hello World'
        )
        print(f'‚úÖ Created message: {msg.subject}')
        print('‚úÖ Core functionality working')
        "

  node-test:
    name: Node.js Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Validate package.json
      run: |
        if [ -f package.json ]; then
          node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
          echo "‚úÖ package.json is valid"
        else
          echo "‚ùå package.json not found"
          exit 1
        fi

  status:
    name: Status Report
    runs-on: ubuntu-latest
    needs: [test, node-test]
    if: always()
    
    steps:
    - name: Report results
      run: |
        echo "üéØ AI Mail MCP CI/CD Results"
        echo "============================"
        echo "Python Tests: ${{ needs.test.result }}"
        echo "Node.js Tests: ${{ needs.node-test.result }}"
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.node-test.result }}" == "success" ]]; then
          echo "üéâ All tests passed!"
          echo "üöÄ Ready for deployment: npx @timelordraps/ai-mail-mcp"
        else
          echo "‚ö†Ô∏è Some tests failed - check logs above"
        fi
