# Test Configuration File
# This file contains configuration for pytest and other testing tools

[tool:pytest]
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=ai_mail_mcp
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --durations=10
    --maxfail=5

markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    security: marks tests as security-related tests  
    performance: marks tests as performance benchmarks
    asyncio: marks tests as async tests
    concurrent: marks tests that use concurrency
    database: marks tests that interact with database
    unit: marks tests as unit tests
    smoke: marks tests as smoke tests (quick validation)

# Test discovery and collection
collect_ignore = [
    "setup.py",
    "build/",
    "dist/",
    ".eggs/",
    "*.egg-info/",
    ".git/",
    ".pytest_cache/",
    "__pycache__/",
    "node_modules/"
]

# Minimum version requirements
minversion = 7.0

# Timeout for tests (in seconds)
timeout = 300

# Test filtering options
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning:pkg_resources
    ignore::PendingDeprecationWarning

# Coverage configuration
[coverage:run]
source = src/ai_mail_mcp
branch = true
parallel = true
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */.*
    */venv/*
    */env/*
    */site-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

precision = 2
show_missing = true
skip_covered = false
sort = Cover

[coverage:html]
directory = htmlcov
title = AI Mail MCP Coverage Report

[coverage:xml]
output = coverage.xml

# Flake8 configuration for linting
[flake8]
max-line-length = 88
select = E,W,F,C,N
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    F401,  # imported but unused (handled by isort)
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    *.egg-info,
    .pytest_cache,
    .coverage,
    htmlcov,
    .venv,
    venv,
    env

per-file-ignores =
    __init__.py:F401
    tests/*:S101,S102,S103,S104,S106,S107,S108,S110,S112,S311,S324,S501,S502,S504,S506,S508,S601,S602,S603,S604,S605,S606,S607,S608,S609,S701,S702

# MyPy configuration for type checking
[mypy]
python_version = 3.8
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[mypy-tests.*]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Black configuration
[tool:black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool:isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_mail_mcp"]
known_third_party = ["pytest", "pydantic", "sqlite3"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
